{"version":3,"sources":["react-editor.js","pages/Home.js","components/Item.js","index.js","pages/Basic.js","components/Text.js","components/List.js"],"names":["context","inEditor","EditorContextHelper","insertComments","node","commentOpen","commentClose","parentNode","insertBefore","document","createComment","nextSibling","setContextProp","prop","key","value","console","error","getComponentMapping","config","componentMappings","EditablePage","content","this","props","templateDefinition","templateDefinitions","TemplateAnnotations","getPageCommentString","ReactDOM","findDOMNode","component","React","createElement","PureComponent","EditableArea","parentTemplateId","getAreaCommentString","getChildren","nodes","map","EditableComponent","getComponentCommentString","Home","title","main","header","Item","metadata","text","list","item","App","state","refresh","pathname","window","location","fetch","replace","RegExp","pagesRes","json","page","templateDefinitionsRes","headerRes","setState","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.514d2a82.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { EditorContextHelper, TemplateAnnotations } from '@magnolia/template-annotations';\n\nconst context = {};\nconst inEditor = EditorContextHelper.inEditor();\n\nfunction insertComments(node, commentOpen, commentClose) {\n  if (node) {\n    node.parentNode.insertBefore(document.createComment(commentOpen), node);\n    node.parentNode.insertBefore(document.createComment(commentClose), node.nextSibling);\n  }\n}\n\nfunction setContextProp(prop) {\n  const { key, value } = prop;\n\n  if (!value) return console.error('Missing prop: ' + key);\n\n  context[key] = value;\n}\n\nfunction getComponentMapping(node) {\n  const key = node['mgnl:template'];\n  const value = context.config.componentMappings[key];\n\n  return value ? value : console.error('Missing component mapping for: ' + key);\n}\n\nclass EditablePage extends React.PureComponent {\n  componentDidMount() {\n    if (inEditor) {\n      const { content } = this.props;\n      const templateDefinition = context.templateDefinitions[content['mgnl:template']];\n      const commentOpen = TemplateAnnotations.getPageCommentString(content, templateDefinition);\n\n      insertComments(ReactDOM.findDOMNode(this), commentOpen, '/cms:page');\n    }\n  }\n\n  render() {\n    const { content = {}, config, templateDefinitions } = this.props;\n\n    setContextProp({ key: 'config', value: config });\n\n    if (inEditor) setContextProp({ key: 'templateDefinitions', value: templateDefinitions });\n\n    const component = getComponentMapping(content);\n\n    return component ? React.createElement(component, content) : null;\n  }\n}\n\nclass EditableArea extends React.PureComponent {\n  componentDidMount() {\n    if (inEditor) {\n      const { content, parentTemplateId } = this.props;\n      const templateDefinition = context.templateDefinitions[parentTemplateId];\n      const commentOpen = TemplateAnnotations.getAreaCommentString(content, templateDefinition);\n\n      insertComments(ReactDOM.findDOMNode(this), commentOpen, '/cms:area');\n    }\n  }\n\n  render() {\n    const { content } = this.props;\n    const { getChildren } = context.config;\n    const nodes = getChildren ? getChildren(content) : content['@nodes'].map((node) => content[node]);\n\n    return nodes\n      ? React.createElement(\n          'div',\n          nodes.map((node) =>\n            node['@nodeType'] === 'mgnl:component'\n              ? React.createElement(EditableComponent, { key: node['@id'], ...node })\n              : null\n          )\n        )\n      : null;\n  }\n}\n\nclass EditableComponent extends React.PureComponent {\n  componentDidMount() {\n    if (inEditor) {\n      const { content } = this.props;\n      const templateDefinition = this.templateDefinitions[content['mgnl:template']];\n      const commentOpen = TemplateAnnotations.getComponentCommentString(content, templateDefinition);\n\n      insertComments(ReactDOM.findDOMNode(this), commentOpen, '/cms:component');\n    }\n  }\n\n  render() {\n    const props = this.props;\n    const component = getComponentMapping(props);\n\n    return component ? React.createElement(component, props) : null;\n  }\n}\n\nexport { EditablePage, EditableArea, EditableComponent };\n","import React from 'react';\nimport { EditableArea } from '../react-editor';\n\nfunction Home(props) {\n  const { title, main, header } = props;\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      {header && <EditableArea content={header} />}\n      {main && <EditableArea content={main} />}\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction Item(props) {\n  return <li>{props.item}</li>;\n}\n\nexport default Item;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { EditableArea, EditorContextHelper } from '@magnolia/react-editor';\nimport { EditorContextHelper } from '@magnolia/template-annotations';\nimport { EditablePage, EditableArea } from './react-editor';\nimport Home from './pages/Home';\nimport Basic from './pages/Basic';\nimport Text from './components/Text';\nimport List from './components/List';\nimport Item from './components/Item';\n\nconst nodeName = 'spa-home';\nconst config = {\n  componentMappings: {\n    'spa-lm:pages/Home': Home,\n    'spa-lm:pages/Basic': Basic,\n    'spa-lm:components/Text': Text,\n    'spa-lm:components/List': List,\n    'spa-lm:components/Item': Item,\n  },\n};\n\nclass App extends React.PureComponent {\n  state = {};\n\n  componentDidUpdate() {\n    EditorContextHelper.refresh();\n  }\n\n  async componentDidMount() {\n    const pathname = window.location.pathname;\n    let templateDefinitions;\n    let header;\n    const pagesRes = await fetch(\n      '/magnoliaAuthor/.rest/delivery/pages/' +\n        nodeName +\n        pathname.replace(new RegExp('(.*' + nodeName + '|.html)', 'g'), '')\n    );\n    const page = await pagesRes.json();\n\n    if (EditorContextHelper.inEditor()) {\n      const templateDefinitionsRes = await fetch(\n        '/magnoliaAuthor/.rest/templateDefinition/v1/' + page['mgnl:template']\n      );\n\n      templateDefinitions = await templateDefinitionsRes.json();\n    }\n\n    if (pathname !== '/magnoliaAuthor/' + nodeName + '.html') {\n      const headerRes = await fetch('/magnoliaAuthor/.rest/delivery/pages/' + nodeName + '/header');\n\n      header = await headerRes.json();\n    }\n\n    this.setState({ page, templateDefinitions, header });\n  }\n\n  render() {\n    const { page, templateDefinitions, header } = this.state;\n\n    return (\n      <div>\n        {/* {header && <EditableArea content={header} />} */}\n        {page && config && <EditablePage content={page} config={config} templateDefinitions={templateDefinitions} />}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport { EditableArea } from '@magnolia/react-editor';\n\nfunction Basic(props) {\n  const { title, main, metadata } = props;\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      {main && <EditableArea content={main} parentTemplateId={metadata['mgnl:template']} />}\n    </div>\n  );\n}\n\nexport default Basic;\n","import React from 'react';\n\nfunction Text(props) {\n  return <div>{props.text}</div>;\n}\n\nexport default Text;\n","import React from 'react';\nimport { EditableArea } from '@magnolia/react-editor';\n\nfunction List(props) {\n  const { list, metadata } = props;\n\n  return <ul>{list && <EditableArea content={list} parentTemplateId={metadata['mgnl:template']} />}</ul>;\n}\n\nexport default List;\n"],"sourceRoot":""}